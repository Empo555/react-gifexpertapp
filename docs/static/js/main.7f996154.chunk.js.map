{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAOaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SARW,SAACC,GACdA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OACtCJ,EAAc,IACdK,QAAQC,IAAI,iBAIhB,SAEI,uBACIC,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAKIA,EAAUC,OALd,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1CT,QAAQC,IAAIc,GAfO,kBAgBZA,GAhBY,4CAAH,sDCNPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECDwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAG1B,CAACpB,IAIGqB,EDlBmBK,CAAa1B,GAA/BO,EAAR,EAAQA,KAAMa,EAAd,EAAcA,QAGd,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGIT,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjBpBgB,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,SAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,gCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OAEnB,aADA,CACC,EAAD,CAEIA,SAAUA,GADLA,Y,MCxBjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7f996154.chunk.js","sourcesContent":["import React, { useState } from 'react';\n//import PropTypes from 'prop-types';\n\n\n\n\n// Recibimos la propiedad de setCategories que le hemos añadido en GifExpertApp\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setinputValue] = useState('')\n\n\n    //Creamos una función que establece el valor del evento (e)\n    const handleInputChange = (e) => {\n        setinputValue(e.target.value);\n    }\n    //Añadimos al presionar enter el input del evento en el setCategories\n    const handleSubmit = (e) => {\n            e.preventDefault();\n            setCategories(cats => [inputValue, ...cats]);\n            setinputValue('');\n            console.log('Submit hecho');\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n\n            />\n        </form>\n    )\n    //Para obligar a usar el props de setCategories desde el constructor en GifExpertApp\n    // AddCategory.propTypes = {\n    //     setCategories: PropTypes.func.isRequired\n    // }\n}\n","\n\n\n\n\n\n//Metodo para traer los gifs\n\nexport const getGifs = async (category) => {\n    //Encode quitar espacios \n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=QvAVsdHi6YrUmj0dE6taUJoaJCYsXYkZ`\n    const respuesta = await fetch(url)\n    //La data de dentro de la data que traemos y la desestructuramos\n    const { data } = await respuesta.json();\n    //Devolvemos solo la información que necesitamos dentro del data\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n\n        }\n    })\n    console.log(gifs);\n    return gifs;\n\n}\n","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n  \n    return (\n        <div className=\"card\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","\nimport React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n\n    const { data, loading } = useFetchGifs(category);\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n            <div className=\"card-grid\">\n            \n            {\n                data.map( img => (\n                    <GifGridItem \n                        key={img.id}\n                        {...img}/>\n                ))\n\n\n            }  \n\n\n        </div>\n        </>\n    )\n}\n\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\n\n\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n            \n                    setState({\n                        data: imgs,\n                        loading: false\n                    })        \n            })\n    }, [category])\n\n  \n\n    return state;\n\n}","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\n\nexport const GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState(['Goku']);\n\n    //Los ... es para añador a lo que hay algo nuevo\n    /*export const handleAdd = () => {\n          setCategories(cats => [...categories]);\n      }*/\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            {/* Añadimos una propiedad ( que obligamos con props en AddCategory) a el componente AddCategory ( el nombre da igual) y la igualamos a la funcioón setCategories*/}\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n\n\n            <ol>\n                {\n                    categories.map(category => (\n                        //Otra manera sin componente:  return <li key={category}> {category}</li>\n                        <GifGrid\n                            key={category}\n                            category={category} />\n                    ))\n                }\n            </ol>\n\n        </div>\n\n\n    )\n\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp.js'\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}